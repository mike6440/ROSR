#!/usr/bin/perl -w
# see https://www.thegeekstuff.com/2010/07/perl-tcp-udp-socket-programming/

# SERVER MODULE WAITS FOR A REQUEST

use lib $ENV{DAQLIB};
use perltools::MRtime;
use perltools::MRutilities;
use IO::Socket;

# ip# and port from su.txt or command line.
if($#ARGV < 0){
	$serverip=FindInfo(`cat tmp`,'TELNET SERVER IP',':');
	$serverport=FindInfo(`cat tmp`,'TELNET SERVER PORT',':');
} else {
	$serverip=shift();
	$serverport=shift();
}
print"socket = $serverip $serverport\n";

##########################
#  we call IO::Socket::INET->new() to create the UDP Socket and bound 
# to specific port number mentioned in LocalPort and there is no need to provide 
# LocalAddr explicitly as in TCPServer.
# $socket = new IO::Socket::INET (
# LocalPort => '5000',
# Proto => 'udp',
# ) or die "ERROR in Socket Creation : $!\n”;
#########################
my $sock = new IO::Socket::INET (
	#LocalHost => $serverip,
	LocalPort => $serverport,
	Proto => 'udp',
	Listen => 1,
	Reuse => 1
) or die "[!!] Could not create socket: $!\n";

my ($size,$received_data,$str);
my ($peer_address,$peer_port);
$str="ok\n";
###################
# while(1)
# {
# # read operation on the socket
# $socket->recv($recieved_data,1024);
# 
# #get the peerhost and peerport at which the recent data received.
# $peer_address = $socket->peerhost();
# $peer_port = $socket->peerport();
# print "\n($peer_address , $peer_port) said : $recieved_data";
# 
# #send the data to the client at which the read/write operations done recently.
# $data = “data from server\n”;
# print $socket “$data”;
# 
# }
#####################

while(1){
# # read operation on the socket
	$sock->recv($received_data,1024);
	#$received_data = $sock->accept();
	#while(<$new_sock>) {
	#    print $_;
	#}
	#print"\n";
	#get the peerhost and peerport at which the recent data received.
	$peer_address = $sock->peerhost();
	$peer_port = $sock->peerport();
	print "\n($peer_address , $peer_port) said : $recieved_data";
}

close($sock);
