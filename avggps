#!/usr/bin/perl -X
my $PROGRAMNAME = 'avggps.pl';
my $VERSION = '10';  
my $EDITDATE = '180923';
#v01 -- taken from avgrad
#v02 -- file output with spaces and labeled for R
#v03 -- new output file names with jday
#v04 -- improve file handling.
#v05 -- new file names
#...
#v08 -- improved setup file call
#v10 -- Add fixed gps. setupfile = setup/su.txt

## CALL --- avggps setupfile

my $setupfile = shift();
print "SETUPFILE = $setupfile ";
if ( -f $setupfile ) {print"EXISTS.\n"}
else { 
	print"DOES NOT EXIST. STOP.\n";
	exit 1;
}

#====================
# PRE-DECLARE SUBROUTINES
#====================
use lib $ENV{DAQLIB};
use perltools::MRtime;
use perltools::MRstatistics;
use perltools::MRutilities;
use POSIX;

print"\n======================== $PROGRAMNAME, $VERSION, $EDITDATE =======================\n";

# DEFINE OUT PATH
my $outpath =  FindInfo($setupfile,'RT OUT PATH', ': ');
if ( ! -d $outpath ) { print"!! RT OUT PATH - ERROR, $outpath\n"; die }
print "OUTPUT DATA PATH = $outpath\n";

my $pgmstart = now();

#----------------- HEADER ----------------
$header = "PROGRAM: $PROGRAMNAME (Version $VERSION, Editdate $EDITDATE)
RUN TIME: " . dtstr($pgmstart) . " utc\n";

$header = $header."GPS OUT PATH: $outpath\n";

my $avgsecs = FindInfo($setupfile,'GPS AVERAGING TIME', ': ');   # v04
$header = $header."GPS AVERAGING TIME (secs): $avgsecs\n";
$header = $header."TIME MARK IS CENTERED ON AVERAGING INTERVAL\n";

$Nsamp_min = 3;
$header = $header."MINIMUM NO. SAMPLES FOR AN AVERAGE: $Nsamp_min\n";

$missing = FindInfo($setupfile,'MISSING VALUE', ': ');
$header = $header."MISSING NUMBER: $missing\n";

# v01a Conversion was 273.15.
$Tabs = 273.15;  # absolute temperature at 0degC
$header = $header."KELVIN CONVERSION: $Tabs\n";

@strings = FindLines($setupfile, 'COMMENTS:', 100 );
$header = $header."COMMENTS:\n";
if ( $#strings > 0 ){
	for($i=1; $i<=$#strings; $i++) { 
		if ( $strings[$i] =~ /^END/i ) {last}
		else { $header = $header."$strings[$i]\n";}
	}
}


#========================
# OPEN THE HEADER FILE
#========================
$str = dtstr($pgmstart,'iso');
my $fnhdr = "$outpath/gps_hdr_".$str.".txt";
print"OUTPUT HEADER FILE: $fnhdr\n";
open HDR,">$fnhdr" or die"OPEN HEADERFILE FAILS";
	print HDR "===============================================================================\n";
	print HDR "$header
======
DATE -- sample time, UTC
LAT = LATITUDE IN DECIMAL DEGREES, N+, S-
LON = LONGITUDE IN DECIMAL DEGREES, E+, W-
SOG = SPEED OVER GROUND, M/S
COG = COURSE OVER GROUND, DEG TRUE
VAR = MAGNETIC VARIATION, E+, W-
======
yyyy MM dd hh mm ss lat lon sog cog var\n";
close HDR;

#===========================
# OUTPUT AVG FILE
#===========================
$fnavg = $outpath . '/' . "gps_avg_".$str.".txt";
print"AVG GPS OUT FILE: $fnavg\n";
open(AVG, ">$fnavg") or die"OPEN AVG DATA FILE FAILS";	
print AVG "navg yyyy MM dd hh mm ss lat lon sog cog var\n";
close AVG;

# ============ DATA PROCESSING PARAMETERS ===========
$SampleFlag = 0;		# 0=standard   1=start at first sample time.

#====================
# OTHER GLOBAL VARIABLES
#====================
use constant YES => 1;
use constant NO => 0;
use constant PI => 3.14159265359;

# $GPRMC,183004,A,4736.2051,N,12217.2880,W,000.1,029.0,210210,018.1,E*6D

# ---- ROUTINE HASH VARIABLES --------
@VARS = ('xlat','ylat','xlon','ylon','xcog','ycog','sog','var');

# CLEAR ACCUMULATOR ARRAYS
ClearAccumulatorArrays();		# Prepare for averaging first record

# WAIT FOR THE FIRST RECORD -- the process is in hold until the first good record come in.
ReadNextRecord();
AccumulateStats();

##=================
## SAMPLE TIME MARKS
##==============
($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints ( now(), $avgsecs, $SampleFlag);
#printf"NEXT SAMPLE: dt_samp=%s, dt1=%s, dt2=%s\r\n", dtstr($dt_samp,'short'), dtstr($dt1,'short'), dtstr($dt2,'short');

$Nsamp=0;
#================
# BEGIN THE MAIN SAMPLING LOOP
# ===============
while ( 1 ) {
	#=====================
	# PROCESS ALL RECORDS IN AVG TIME
	#=====================
 	while ( 1 ) {
		#---READ NEXT RECORD (loop)---
		while ( ReadNextRecord() == NO )	{}
		#---NEW RECORD, CHECK FOR END---
		if ( now() >= $dt2 ) { last; }
		else {		
			AccumulateStats();
		}
	}
	#====================
	# COMPUTE SAMPLE STATS
	#====================
	ComputeStats();
	$Nsamp++;
	SaveStats();
	
	ClearAccumulatorArrays();		# Prepare for averaging first record
	($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints( $record{dt}, $avgsecs, 0);	#increment $dt1 and $dt2 
	#printf"NEXT SAMPLE: dt_samp=%s, dt1=%s, dt2=%s\r\n", dtstr($dt_samp,'short'), dtstr($dt1,'short'), dtstr($dt2,'short');
	AccumulateStats(); 			# deals with the current record
	#=======================
	# END OF THE LOOP
	#=======================
}
exit(0);





#*************************************************************/
sub ReadNextRecord
{
	my ($str, $cmd ,$dtrec, $Nfields, $ftmp);
	my @dat;
	my $flag = 0;
	my @dt;	

	##==================
	## WAIT FOR INPUT
	## Send out a prompt --
	## Loop checking for input, 5 sec
	## send another prompt
	##==================
	print"GPS--\r\n";
	chomp($str=<STDIN>);
	
	#print"str = $str\n"; die;
	## COMMANDS
	if ( $str =~ /quit/i ) {print"QUIT GPS avg program\n"; exit 0 }
	
	#========================
	# DATA INPUT
	#@VARS = ('xlat','ylat','xlon','ylon','xcog','ycog','sog','var');
	#$GPRMC,190824,A,4736.2032,N,12217.2883,W,000.1,209.1,210210,018.1,E*62

	if($str =~ /\$GPRMC/ )	{					# identifies a data string
		$str =~ s/^*\$/\$/;						# remove leading stuff
		# DECODE THE STRING AND RETURN VARIABLES
 		($dtgps, $lat, $lon, $sog, $cog, $var) = gprmc($str,-999);
 		#print "dtgps, lat, lon, sog, cog, var = $dtgps, $lat, $lon, $sog, $cog, $var\n"; die;
		my($xc,$yc) = VecP2V(1,$lat, $missing);
		my($xp,$yp) = VecP2V(1,$lon, $missing);
		my($xr,$yr) = VecP2V(1,$cog, $missing);
		#print"xc=$xc, yc=$yc\n";
		#print"xp=$xc, yp=$yc\n";
		#print"xr=$xc, yr=$yc\n";
		if ( $dtgps > 0 ) {          	# = $missing if the gps record is bad
			%record = (
				dt => now(),			# the actual record time is the DAQ time
				xlat => $xc,
				ylat => $yc,
				xlon => $xp,
				ylon => $yp,
				xcog => $xr,
				ycog => $yr,
				sog =>  $sog,
				var => $var
			);
						
			## RAW RT LINE
			# GPS RAW: 20061213-221214, 47.60003, -122.34567, 27.34,  28.4, 23.2, 20061213-221214, 47.60003
			$str = sprintf"GPSRW, %s, %8.5f, %9.5f, %5.2f, %5.1f, %4.1f, %s",
				dtstr($record{dt},'short'), $lat, $lon, $sog, $cog, $var, dtstr($dtgps,'short');
			printf "<<%s>>\r\n",$str;
			return( YES );  # means we like the data here.
		} else {
		# default if no gps
			printf "<<GPSRW,%s,0,0,0,0,0,%s>>\n",dtstr(now(),'short'),dtstr(now(),'short');
		}
	}
	return ( NO );
}


#*************************************************************/
sub ClearAccumulatorArrays
# CLEAR ACCUMULATOR ARRAYS FOR ALL AVERAGING
# varnames = str2mat('drum','org','kt15','bb2t3','bb2t2','bb2t1','bb1t3','bb1t2','bb1t1');
# varnames = str2mat(varnames,'Vpwr','wintemp','tt8temp','sw1','sw2','pitch','roll','kttemp','pnitemp');  %v2
# varnames = str2mat(varnames,'bb1ap1', 'bb1bb2ap','bb2ap3','kttempcase'); % v3
# nvars = length(varnames(:,1));
# Zeros global hash variable %sum_xx(sum, sumsq, n, min, max) where
#  xx = (drum, kt, bb2t3, bb2t2, bb2t1, bb1t3, bb1t2, bb1t1, Vref, bb1ap1, bb1bb2ap2, bb2ap3, kttempcase,
#	wintemp, tt8temp, Vpwr, sw1, sw2, pitch, roll, sog, cog, az, pnitemp, lat, lon, sog, var, kttemp )
{
	my ($i, @x, @y);
	#=================
	#	SET UP THE HASHES
	#=================
	my %xx = ( sum => 0, sumsq => 0, n => 0, min => 1e99, max => -1e99 );
	my %yy = ( mn => $missing, std => $missing, n => 0, min => $missing, max => $missing );
	# ---- INITIALIZE HASHES -------
	foreach ( @VARS ) 
	{
		eval "%sum_$_ = %xx;   %samp_$_ = %yy;";
	}
}


#*************************************************************/
sub ComputeSampleEndPoints
# ($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints($dtx, $avgsecs, $SampleFlag);
#
# Computes the time start and stop times for making an average.  Time is 
# expressed in seconds since 1970 by using the dtsecs() function.
#
#INPUT VARIABLES:
#  $dtx (=$record{dt}) is the current record time
#  $avgsecs = averaging time
#  $SampleFlag = 0/1
# 		There are two optons: either divide the day into even sample 
# 		periods of $avgsecs long (e.g. 0, 5, 10, ... min) or begin 
# 		precisely with the input sample.  The sample start parameter
# 		$SampleFlag is set for this option.
# OUTPUT (GLOBAL)
#  $dt_samp = the mid point of the sample interval
#  $dt1, $dt2 = current sample end points
# REQUIRED SUBROUTINES
#	datevec();
#	datesec();
#
# v101 060622 rmr -- begin tracking this subroutine.
# v101 060628 -- begin toolbox_avg
{
	my ($y, $M, $d, $h, $m, $s, $dt0);
	my $dt_samp = shift();
	my $avgsecs = shift();
	my $SampleFlag=shift();
	
	#$dt_samp = $record{dt};				# this is the time of the first sample.
	if ( $SampleFlag == 0 )
	{
		#==================
		# COMPUTE THE dt CURRENT BLOCK
		#==================
		($y, $M, $d, $h, $m, $s) = datevec( $dt_samp );
		$dt0 = datesec($y, $M, $d, 0, 0, 0) - $avgsecs/2;  # epoch secs at midnight
		$dt1 = $dt0 + $avgsecs * int( ($dt_samp - $dt0) / $avgsecs );	# prior sample block dtsec
	} 
	else { $dt1 = $dt_samp; }
	
	$dt2 = $dt1 + $avgsecs;			# next sample block dtsec
	$dt_samp = $dt1 + $avgsecs/2;  # the time of the current avg block
	return ($dt_samp, $dt1, $dt2);
}
#*************************************************************/
sub AccumulateStats
# Add to the sums for statistical averages
# Increments global hash variable %sum_xx(sum, sumsq, n, min, max) where
#  xx = (kt, bb2t3, bb2t2, bb2t1, bb1t3, bb1t2, bb1t1, Vref, bb1ap1, bb1bb2ap2, bb2ap3, kttempcase,
#	wintemp, tt8temp, Vpwr, sw1, sw2, pitch, roll, sog, cog, az, pnitemp, lat, lon, sog, var, kttemp )
{
	my ($d1, $d2, $ii);
	my ($x, $y, $s);
	
		foreach ( @VARS )
		{
			my $zstr = sprintf("\@s = %%sum_%s;  %%sum_%s = Accum (\$record{%s}, \@s);", $_, $_, $_);
			eval $zstr;
		}

}

#*************************************************************/
sub Accum
# Accum(%hash, $datum);   global: $missing
{
	my ($x, @a) = @_;
	my %r = @a;
	#printf("Accum : %.5f\n", $x);
	if ( $x > $missing )
	{
		$r{sum} += $x;
		$r{sumsq} += $x * $x;
		$r{n}++;
		$r{min} = minvalue($r{min}, $x);
		$r{max} = maxvalue($r{max}, $x);
		@a = %r;
	}
	return( @a );
}

#*************************************************************/
sub ComputeStats
# ComputeStats();
#  xx = (drum, kt, bb2t3, bb2t2, bb2t1, bb1t3, bb1t2, bb1t1, Vref, bb1ap1, bb1bb2ap2, bb2ap3, kttempcase,
#	wintemp, tt8temp, Vpwr, sw1, sw2, pitch, roll, sog, cog, az, pnitemp, lat, lon, sog, var, kttemp )
{
	my $i;
	my ($mean, $stdev, $n, $x, $xsq);
	
	#====================
	# SCALARS
	# sub (mn, stdpcnt, n, min, max) = stats1(sum, sumsq, N, min, max, Nsamp_min);
	#=====================
	foreach ( @VARS ) {
		my $zz = sprintf( "( \$samp_\%s{mn}, \$samp_\%s{std}, \$samp_\%s{n}, \$samp_\%s{min}, \$samp_\%s{max}) =
			stats1 ( \$sum_\%s{sum},  \$sum_\%s{sumsq},  \$sum_\%s{n},  \$sum_\%s{min},  \$sum_\%s{max}, \$Nsamp_min,\$missing );",
			$_,$_,$_,$_,$_,$_,$_,$_,$_,$_);
		eval $zz ;
	}
}
	


#*************************************************************/
sub SaveStats
{
	my $timestr = dtstr($dt_samp,'ssv');
		
	## FINAL CALCULATIONS FOR OUTPUT
	my ($i, $ii);
	my ($xf, $lat, $lon, $cog);
	
	($xf,$lat) = VecV2P($samp_xlat{mn}, $samp_ylat{mn}, $missing);
	if($lat > 180){$lat -= 360 }
	
	($xf,$lon) = VecV2P($samp_xlon{mn}, $samp_ylon{mn}, $missing);
	if($lon > 180){$lon -= 360 }
	($xf,$cog) = VecV2P($samp_xcog{mn}, $samp_ycog{mn}, $missing);
	
	## WRITE DATA TO OUTPUT FILE
	open(F, ">>$fnavg") or die("Can't open out file\n");  # v03 
	printf F "%d %s  %8.5f  %9.5f  %5.2f  %5.1f  %4.1f\n",
		$Nsamp, $timestr, $lat, $lon, $samp_sog{mn}, $cog, $samp_var{mn} ;
	close(F);
	
	## PRINT OUTPUT LINE IN EXPECT FORMAT
	printf "<<GPSAV,%s,%.5f,%.5f,%.2f,%.1f,%.1f>>\n",
		$timestr, $lat, $lon, $samp_sog{mn}, $cog, $samp_var{mn} ;
}

